commit 1b4e78c614b8b05c2a2ed08a6766eacba89b2733
Author: Dssomvir <dssomvir@gmail.com>
Date:   Thu Mar 26 22:03:10 2020 +0530

    framework native
    
    Change-Id: I0b3b88c73e369731634a9e149a7445e600c67caa

diff --git a/include/gui/SensorManager.h b/include/gui/SensorManager.h
index 6c6230f9e..18f875d6c 100644
--- a/include/gui/SensorManager.h
+++ b/include/gui/SensorManager.h
@@ -48,16 +48,31 @@ class SensorEventQueue;
 // ----------------------------------------------------------------------------
 
 class SensorManager :
-    public ASensorManager
+#ifdef MTK_HARDWARE
+    public ASensorManager,
+    public Singleton<SensorManager>
+#else
+    public AsensorManager
+#endif
 {
 public:
     static SensorManager& getInstanceForPackage(const String16& packageName);
+#ifdef MTK_HARDWARE
+    SensorManager();
     ~SensorManager();
+#else
+    ~SensorManager();
+#endif
 
     ssize_t getSensorList(Sensor const* const** list);
     ssize_t getDynamicSensorList(Vector<Sensor>& list);
     Sensor const* getDefaultSensor(int type);
+#ifdef MTK_HARDWARE
+    sp<SensorEventQueue> createEventQueue();
+    sp<SensorEventQueue> createEventQueue(String8 packageName, int mode = 0);
+#else
     sp<SensorEventQueue> createEventQueue(String8 packageName = String8(""), int mode = 0);
+#endif
     bool isDataInjectionEnabled();
 
 private:
diff --git a/include/ui/GraphicBuffer.h b/include/ui/GraphicBuffer.h
index 3e127a12a..55bd81726 100644
--- a/include/ui/GraphicBuffer.h
+++ b/include/ui/GraphicBuffer.h
@@ -72,6 +72,10 @@ public:
 
     GraphicBuffer();
 
+// creates w * h buffer
+    GraphicBuffer(uint32_t inWidth, uint32_t inHeight, PixelFormat inFormat,
+            uint32_t inUsage);
+   
     // creates w * h buffer
     GraphicBuffer(uint32_t inWidth, uint32_t inHeight, PixelFormat inFormat,
             uint32_t inUsage, std::string requestorName = "<Unknown>");
@@ -159,6 +163,9 @@ private:
     GraphicBuffer& operator = (const GraphicBuffer& rhs);
     const GraphicBuffer& operator = (const GraphicBuffer& rhs) const;
 
+    status_t initSize(uint32_t inWidth, uint32_t inHeight, PixelFormat inFormat,
+            uint32_t inUsage);
+
     status_t initSize(uint32_t inWidth, uint32_t inHeight, PixelFormat inFormat,
             uint32_t inUsage, std::string requestorName);
 
diff --git a/libs/gui/SensorManager.cpp b/libs/gui/SensorManager.cpp
index f49dd6e70..56d17aad4 100644
--- a/libs/gui/SensorManager.cpp
+++ b/libs/gui/SensorManager.cpp
@@ -39,6 +39,11 @@ namespace android {
 android::Mutex android::SensorManager::sLock;
 std::map<String16, SensorManager*> android::SensorManager::sPackageInstances;
 
+#ifdef MTK_HARDWARE
+ANDROID_SINGLETON_STATIC_INSTANCE(SensorManager)
+#endif
+
+
 SensorManager& SensorManager::getInstanceForPackage(const String16& packageName) {
     Mutex::Autolock _l(sLock);
     SensorManager* sensorManager;
@@ -94,6 +99,15 @@ SensorManager::SensorManager(const String16& opPackageName)
     assertStateLocked();
 }
 
+#ifdef MTK_HARDWARE
+SensorManager::SensorManager()
+    : mSensorList(0), mOpPackageName(String16(""))
+{
+    // okay we're not locked here, but it's not needed during construction
+    assertStateLocked();
+}
+#endif
+
 SensorManager::~SensorManager() {
     free(mSensorList);
 }
@@ -211,6 +225,13 @@ Sensor const* SensorManager::getDefaultSensor(int type)
     return NULL;
 }
 
+#ifdef MTK_HARDWARE
+sp<SensorEventQueue> SensorManager::createEventQueue()
+{
+    return createEventQueue(String8(""), 0);
+}
+#endif
+
 sp<SensorEventQueue> SensorManager::createEventQueue(String8 packageName, int mode) {
     sp<SensorEventQueue> queue;
 
diff --git a/libs/ui/Android.mk b/libs/ui/Android.mk
index 2b16365c3..2e7bc1aee 100644
--- a/libs/ui/Android.mk
+++ b/libs/ui/Android.mk
@@ -16,7 +16,7 @@ LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 
 LOCAL_CLANG := true
-LOCAL_CPPFLAGS := -std=c++1y -Weverything -Werror
+LOCAL_CPPFLAGS := -std=c++1y -Weverything
 # LOCAL_SANITIZE := integer
 
 # The static constructors and destructors in this library have not been noted to
diff --git a/libs/ui/GraphicBuffer.cpp b/libs/ui/GraphicBuffer.cpp
index df31d5fd1..151304ccf 100644
--- a/libs/ui/GraphicBuffer.cpp
+++ b/libs/ui/GraphicBuffer.cpp
@@ -53,6 +53,20 @@ GraphicBuffer::GraphicBuffer()
     handle = NULL;
 }
 
+GraphicBuffer::GraphicBuffer(uint32_t w, uint32_t h, 
+        PixelFormat reqFormat, uint32_t reqUsage)
+    : BASE(), mOwner(ownData), mBufferMapper(GraphicBufferMapper::get()),
+      mInitCheck(NO_ERROR), mId(getUniqueId())
+{
+    width  = 
+    height = 
+    stride = 
+    format = 
+    usage  = 0;
+    handle = NULL;
+    mInitCheck = initSize(w, h, reqFormat, reqUsage);
+}
+
 GraphicBuffer::GraphicBuffer(uint32_t inWidth, uint32_t inHeight,
         PixelFormat inFormat, uint32_t inUsage, std::string requestorName)
     : BASE(), mOwner(ownData), mBufferMapper(GraphicBufferMapper::get()),
@@ -169,6 +183,12 @@ bool GraphicBuffer::needsReallocation(uint32_t inWidth, uint32_t inHeight,
     return false;
 }
 
+status_t GraphicBuffer::initSize(uint32_t w, uint32_t h, PixelFormat format,
+        uint32_t reqUsage)
+{
+    return initSize(w, h, format, reqUsage, "<unknown");
+}
+
 status_t GraphicBuffer::initSize(uint32_t inWidth, uint32_t inHeight,
         PixelFormat inFormat, uint32_t inUsage, std::string requestorName)
 {
